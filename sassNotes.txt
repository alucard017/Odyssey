///////////////-----------SASS Basics-----------/////////////////

1. What is Sass ?
   - Sass is a preprocessor to CSS that add elegance and magic to the existing CSS codes.
   - SASS SOURCE CODE ---------> Sass Compiler ---------> COMPILED CSS CODE
   - Other preprocessor include Less, Stylus etc.

2. What are the features of Sass ?
   - Variables -> For reusable values such as colors, font-sizes, spacing etc.
   - Nesting -> to nest selectors inside of one another, allowing us to write less code.
   - Operators -> for mathematical operations
   - Partials and imports -> to write CSS in different files and importing them all into one single file.
   - Mixins -> to write reusable pieces of CSS code.
   - Functions -> similar to mixins, with the difference that they produce a value that can be used
   - Extends -> to make different selectors inherit declarations that are common to all of them.
   - Control Directives -> for writing complex code using conditionals and loops, USED FOR WRITING CSS FRAMEWORKS.

NOTE - Both SASS and SCSS are used for Sass compilation however SCSS is used for better CSS transformation to SASS

//////////////-----------Float Clearfix-----------//////////////

- When we float some certain elements to any direction sometimes, the height becomes zero and disappears
- So to avoid this behaviour, we need to set Clearfix.
- set Clearfix as a class to the element.
- properties like
 .clearfix::after
 {
    content:"";
    clear:both;
    display:table;
 }

//////////////-----------Float Clearfix-----------//////////////
/////////////------------Mixins---------------///////////////

- Mixins is just like a function used in usual programming.
- But it doesn't return any value.
- Eg.
  @mixin setLinkProps($col){
  text-decoration: none;
  text-transform: uppercase;
  color: $col; --> set the passed color
}

 a {
      @include setLinkProps($color-text-dark); --> pass the argument color.
   }

/////////////------------Mixins---------------///////////////

/////////////------------Functions---------------///////////////

- Functions are similar to mixins but returns a value that can be used.
- Eg.
  @function divide($a, $b)
  {
   @return $a/$b;
  }
  
  div
  {
   margin:divide(60,2)*1px; // margin : 30px;
  }

/////////////------------Functions---------------///////////////

/////////////------------Extend---------------///////////////

- It works quite similar to mixins.
- But in case of mixins all the code declared in the mixin is copied to the selector block.
- But in case of extend all the selector is copied and placed at the place holder of the declared extend.
- Eg.

%btn-placeholder
{
  padding: 10px;
  display: inline-block;
  text-align: center;
  border-radius: 100px;
  width: $width-button;
  @include setLinkProps($color-text-light);
}
.btn-main {
  
  &:link {
    @extend %btn-placeholder;
    background-color: $color-secondary;
  }
  &:hover {
    background-color: darken($color-secondary, 15%);
  }
}
.btn-hot {
  &:link {
    @extend %btn-placeholder;
    background-color: $color-tertiary;
  }
  &:hover {
    background-color: darken($color-tertiary, 15%);
  }
}

/////////////------------Extend---------------///////////////


